// Generated by CoffeeScript 1.7.1
(function() {
  var buildGlobalObject, buildLiteralObject, buildProperty, buildPropertyObject, buildString, getLevelInfo, obfuscate, traverse, _base, _base1;

  traverse = function(visitor) {
    var call, _traverse;
    call = function(element, parent, key, state) {
      var cont, newState;
      newState = null;
      cont = true;
      newState = visitor(element, parent, key, state, function(_newState) {
        return newState = _newState;
      }, function(_cont) {
        return cont = _cont;
      });
      if (cont) {
        _traverse(element, newState);
      }
    };
    _traverse = function(node, state) {
      if (Array.isArray(node)) {
        return node.forEach(function(element, index) {
          call(element, node, index, state);
        });
      } else if (node && typeof node === 'object') {
        return (Object.keys(node)).forEach(function(key) {
          call(node[key], node, key, state);
        });
      }
    };
    return _traverse;
  };

  getLevelInfo = function(node) {
    var functions, getVarsInDeclaration, literalEntries, localVars, localVarsVisitor, memberExpressions, varIds;
    getVarsInDeclaration = function(node) {
      return node.declarations.map(function(declaration) {
        return declaration.id.name;
      });
    };
    localVars = new Set;
    varIds = [];
    memberExpressions = [];
    literalEntries = [];
    functions = [];
    localVarsVisitor = function(node, parent, key, state, saveState, cont) {
      var varsInDeclaration;
      if (node == null) {
        cont(false);
        return;
      }
      if (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') {
        if (node.type === 'FunctionDeclaration') {
          localVars.add(node.id.name);
          varIds.push({
            parent: node,
            key: 'id',
            name: node.id.name
          });
        }
        functions.push(node);
        cont(false);
      } else if (node.type === 'VariableDeclaration') {
        varsInDeclaration = getVarsInDeclaration(node);
        varsInDeclaration.forEach(function(varInDeclaration) {
          localVars.add(varInDeclaration);
        });
      } else if (key === 'property' && parent.type === 'MemberExpression' && !parent.computed) {
        memberExpressions.push(parent);
      } else if (node.type === 'Literal' && !(parent.type === 'Property' && key === 'key')) {
        literalEntries.push({
          parent: parent,
          key: key,
          value: node.raw
        });
      } else if (node.type === 'Identifier' && !(parent.type === 'Property' && key === 'key')) {
        varIds.push({
          parent: parent,
          key: key,
          name: node.name
        });
      }
    };
    if (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') {
      if (node.type === 'FunctionExpression' && (node.id != null)) {
        localVars.add(node.id.name);
        varIds.push({
          parent: node,
          key: 'id',
          name: node.id.name
        });
      }
      node.params.forEach(function(param, index) {
        localVars.add(param.name);
        varIds.push({
          parent: node.params,
          key: index,
          name: param.name
        });
      });
    }
    if (node.type === 'FunctionDeclaration' || node.type === 'FunctionExpression') {
      (traverse(localVarsVisitor))(node.body);
    } else {
      (traverse(localVarsVisitor))(node);
    }
    return {
      localVars: localVars,
      varIds: varIds,
      memberExpressions: memberExpressions,
      literalEntries: literalEntries,
      functions: functions
    };
  };

  buildString = function(n, prefix) {
    var i, string, _i;
    if (prefix == null) {
      prefix = '';
    }
    string = prefix;
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      string += '_';
    }
    return string;
  };

  buildProperty = function(objectName, propertyName) {
    return {
      type: 'MemberExpression',
      computed: false,
      object: {
        type: 'Identifier',
        name: objectName
      },
      property: {
        type: 'Identifier',
        name: propertyName
      }
    };
  };

  buildPropertyObject = function(properties) {
    var string;
    string = 'var _ = {\n';
    properties.forEach(function(entry, key) {
      string += "    " + entry.newName + ": '" + key + "',\n";
    });
    return string += '};';
  };

  buildLiteralObject = function(literals) {
    var string;
    string = 'var __ = {\n';
    literals.forEach(function(entry, key) {
      string += "    " + entry.newName + ": " + key + ",\n";
    });
    return string += '};';
  };

  buildGlobalObject = function(globals) {
    var string;
    string = 'var ___ = window;\n' + 'var ____ = {\n';
    globals.forEach(function(entry, key) {
      string += "    " + entry.newName + ": ___." + key + ",\n";
    });
    return string += '};';
  };

  obfuscate = function(source, options) {
    var getGlobalReplacer, getLiteralReplacer, getNewVars, getPropertyReplacer, globals, globalsObject, header, literals, literalsObject, newSource, properties, propertyObject, replace, tree;
    if (options == null) {
      options = {};
    }
    if (options.headers == null) {
      options.headers = true;
    }
    getNewVars = function(varsSet, frames) {
      var localPrefix, map;
      map = new Map;
      localPrefix = '';
      varsSet.forEach(function(varName) {
        var frame;
        frame = frames.find(function(entry) {
          return entry.varsMap.has(varName);
        });
        if (frame != null) {
          map.set(varName, frame.value.varsMap.get(varName));
        } else {
          localPrefix += '_';
          map.set(varName, frames.value.prefix + localPrefix);
        }
      });
      return map;
    };
    properties = new Map;
    getPropertyReplacer = function(name) {
      var newName, newProperty;
      if (properties.has(name)) {
        return (properties.get(name)).newProperty;
      } else {
        newName = buildString(properties.size, '_');
        newProperty = buildProperty('_', newName);
        properties.set(name, {
          newName: newName,
          newProperty: newProperty
        });
        return newProperty;
      }
    };
    literals = new Map;
    getLiteralReplacer = function(raw) {
      var newName, newProperty;
      if (literals.has(raw)) {
        return (literals.get(raw)).newProperty;
      } else {
        newName = buildString(literals.size, '_');
        newProperty = buildProperty('__', newName);
        literals.set(raw, {
          newName: newName,
          newProperty: newProperty
        });
        return newProperty;
      }
    };
    globals = new Map;
    getGlobalReplacer = function(name) {
      var newName, newProperty;
      if (globals.has(name)) {
        return (globals.get(name)).newProperty;
      } else {
        newName = buildString(globals.size, '_');
        newProperty = buildProperty('___', newName);
        globals.set(name, {
          newName: newName,
          newProperty: newProperty
        });
        return newProperty;
      }
    };
    replace = function(node, frames) {
      var functions, literalEntries, localVars, memberExpressions, updatedFrames, varIds, varsMap, _ref;
      _ref = getLevelInfo(node), localVars = _ref.localVars, varIds = _ref.varIds, memberExpressions = _ref.memberExpressions, literalEntries = _ref.literalEntries, functions = _ref.functions;
      varsMap = getNewVars(localVars, frames, frames.value.prefix);
      updatedFrames = frames.add({
        varsMap: varsMap,
        prefix: frames.value.prefix + buildString(varsMap.size)
      });
      varIds.forEach(function(varId) {
        var frame, variable;
        variable = varId.parent[varId.key];
        if ((variable.name === 'arguments' || variable.name === 'name') && !varsMap.has(variable.name)) {
          return;
        }
        frame = updatedFrames.find(function(entry) {
          return entry.varsMap.has(variable.name);
        });
        if (frame != null) {
          variable.name = frame.value.varsMap.get(variable.name);
        } else if (variable.name === 'window') {
          variable.name = '___';
        } else {
          varId.parent[varId.key] = getGlobalReplacer(varId.name);
        }
      });
      memberExpressions.forEach(function(memberExpression) {
        memberExpression.property = getPropertyReplacer(memberExpression.property.name);
        memberExpression.computed = true;
      });
      literalEntries.forEach(function(entry) {
        entry.parent[entry.key] = getLiteralReplacer(entry.value);
      });
      functions.forEach(function(_function) {
        replace(_function, updatedFrames);
      });
    };
    tree = esprima.parse(source);
    replace(tree, roller.Emp.add({
      varsMap: new Map,
      prefix: '_____'
    }));
    newSource = escodegen.generate(tree);
    if (options.headers) {
      propertyObject = buildPropertyObject(properties);
      literalsObject = buildLiteralObject(literals);
      globalsObject = buildGlobalObject(globals);
      header = '';
      if (properties.size) {
        header += "" + propertyObject + "\n";
      }
      if (literals.size) {
        header += "" + literalsObject + "\n";
      }
      if (globals.size) {
        header += "" + globalsObject + "\n";
      }
      return header + newSource;
    } else {
      return newSource;
    }
  };

  if (window.roller == null) {
    window.roller = {};
  }

  if ((_base = window.roller).obfuscate == null) {
    _base.obfuscate = obfuscate;
  }

  if ((_base1 = window.roller).getLevelInfo == null) {
    _base1.getLevelInfo = getLevelInfo;
  }

}).call(this);
